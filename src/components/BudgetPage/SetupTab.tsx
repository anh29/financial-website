import React, { useState } from 'react'
import { BudgetAllocation, RemainingBudget } from '../../types/budgets'
import styles from './SetupTab.module.css'
import RemainingBudgetAllocation from './RemainingBudgetAllocation'

interface SetupTabProps {
  totalBudget: number
  totalAllocated: number
  remaining: number
  budgetAllocations: BudgetAllocation[]
  suggestedCategories: string[]
  formatCurrency: (value: number) => string
  handleMonthlyBudgetChange: (value: number) => void
  monthlyBudget: number
  handleSaveBudget: (newAllocation: BudgetAllocation[]) => void
  isBudgetSaved: boolean
  savings: number
  handleSavingsChange: (value: number) => void
  remainingMonthlyBudget: number
  remainingBudget: RemainingBudget | null
}

const SetupTab: React.FC<SetupTabProps> = ({
  totalBudget,
  totalAllocated,
  remaining,
  budgetAllocations,
  suggestedCategories,
  formatCurrency,
  handleMonthlyBudgetChange,
  monthlyBudget,
  handleSaveBudget,
  isBudgetSaved,
  remainingMonthlyBudget,
  remainingBudget
}) => {
  const [animatedIndex, setAnimatedIndex] = useState<number | null>(null)
  const [allocations, setAllocations] = useState<BudgetAllocation[]>([])
  const [showCategoryManagement, setShowCategoryManagement] = useState(false)

  const handleAdd = (description?: string) => {
    const newAllocation: BudgetAllocation = {
      monthly_budget_id: '',
      description: description || '',
      amount: 0
    }
    setAllocations((prev) => [...prev, newAllocation])
  }

  const handleAllocationChange = (index: number, field: keyof BudgetAllocation, value: string | number) => {
    const updated = [...allocations]
    if (field === 'amount') {
      updated[index].amount = Number(value)
    } else if (field === 'percent') {
      const percent = Number(value)
      updated[index].percent = percent
      updated[index].amount = Math.round((monthlyBudget * percent) / 100)
    } else {
      updated[index][field] = value
    }
    setAllocations(updated)
  }

  const handleSave = () => {
    handleSaveBudget(allocations)
    setAllocations([])
  }

  const renderAllocationCard = (item: BudgetAllocation, index: number, isEditable: boolean) => {
    const percent = monthlyBudget > 0 ? Math.round((item.amount / monthlyBudget) * 100) : 0
    const warning = item.amount > monthlyBudget * 0.3

    return (
      <div key={index} className={`${styles.allocationCard} ${warning ? styles.warningCard : ''}`}>
        <div className={styles.inputGroup}>
          <label className={styles.inputLabel}>üè∑ M√¥ t·∫£:</label>
          <input
            type='text'
            value={item.description}
            onChange={(e) => isEditable && handleAllocationChange(index, 'description', e.target.value)}
            placeholder='V√≠ d·ª•: ƒÇn u·ªëng'
            className={styles.inputField}
            readOnly={!isEditable}
          />
        </div>

        <div className={styles.inputGroup}>
          <label className={styles.inputLabel}>üíµ S·ªë ti·ªÅn:</label>
          <input
            type='number'
            value={item.amount || ''}
            onChange={(e) => {
              if (isEditable) {
                const newAmount = Number(e.target.value)
                handleAllocationChange(index, 'amount', newAmount)

                if (newAmount > monthlyBudget * 0.3) {
                  setAnimatedIndex(index)
                  setTimeout(() => setAnimatedIndex(null), 500)
                }
              }
            }}
            placeholder='0'
            className={`${styles.inputField} ${warning ? styles.inputWarning : ''} ${
              animatedIndex === index ? styles.animatePulse : ''
            }`}
            readOnly={!isEditable}
          />
        </div>

        <div className={styles.inputGroup}>
          <label className={styles.inputLabel}>üìä T·ª∑ l·ªá ng√¢n s√°ch (%):</label>
          <input
            type='number'
            value={percent || ''}
            onChange={(e) => isEditable && handleAllocationChange(index, 'percent', e.target.value)}
            placeholder='0'
            className={styles.inputField}
            readOnly={!isEditable}
          />
        </div>
      </div>
    )
  }

  return (
    <div className={styles.setupTab}>
      {/* T·ªïng ng√¢n s√°ch */}
      <div className={styles.infoCard}>
        <div className={styles.infoIcon}>üí∞</div>
        <div className={styles.infoContent}>
          <span className={styles.infoLabel}>T·ªïng ng√¢n s√°ch:</span>
          <span className={styles.infoValue}>{formatCurrency(totalBudget)}</span>
        </div>
        <div className={styles.infoStatus} style={{ color: remaining < 0 ? '#e74c3c' : '#2ecc71' }}>
          {remaining < 0
            ? `‚ö† Thi·∫øu: ${formatCurrency(Math.abs(remaining))}`
            : `üü¢ C√≤n l·∫°i: ${formatCurrency(remaining)}`}
        </div>
      </div>
      <div className={styles.divider} />

      {/* Section 1: Monthly Budget Allocation */}
      <div className={styles.cardSection}>
        <div className={styles.cardHeaderRow}>
          <div className={styles.headerLeft}>
            <span className={styles.cardIcon}>üìÖ</span>
            <h2 className={styles.cardTitle}>Ph√¢n b·ªï ng√¢n s√°ch th√°ng n√†y</h2>
          </div>
          <div className={styles.inlineInputGroup}>
            <label className={styles.label} htmlFor='monthlyBudgetInput'>
              Ng√¢n s√°ch th√°ng:
            </label>
            <input
              id='monthlyBudgetInput'
              type='number'
              className={styles.totalInput}
              value={monthlyBudget}
              onChange={(e) => handleMonthlyBudgetChange(Number(e.target.value))}
            />
          </div>
        </div>
        <div className={styles.progressGroup}>
          <div className={styles.progressBarLarge}>
            <div
              className={styles.progressFillLarge}
              style={{
                width: `${Math.min(100, (totalAllocated / monthlyBudget) * 100)}%`,
                backgroundColor: totalAllocated > monthlyBudget ? '#e74c3c' : '#2ecc71'
              }}
            />
            <span className={styles.progressAllocatedLabel}>
              <span className={styles.progressBadgeIcon}>üì¶</span>
              {formatCurrency(totalAllocated)}
              {` (${Math.round((totalAllocated / monthlyBudget) * 100)}%)`}
            </span>
            <span className={styles.progressRemainingLabel}>
              <span className={styles.progressBadgeIcon} style={{ color: '#00c48c' }}>
                üü¢
              </span>
              {formatCurrency(Math.abs(remainingMonthlyBudget))}
              {` (${Math.round((Math.abs(remainingMonthlyBudget) / monthlyBudget) * 100)}%)`}
            </span>
          </div>
          <div className={styles.progressLabelsLarge}>
            <span>0ƒë</span>
            <span>{formatCurrency(monthlyBudget)}</span>
          </div>
        </div>
        {remainingMonthlyBudget < 0 && (
          <div className={styles.warningMessage}>
            ‚ö†Ô∏è C·∫£nh b√°o: Ng√¢n s√°ch ƒë√£ v∆∞·ª£t qu√° {formatCurrency(Math.abs(remainingMonthlyBudget))} so v·ªõi d·ª± ki·∫øn
          </div>
        )}
      </div>

      {/* Section 2: Previous Month's Remaining Budget Allocation */}
      {remainingBudget && remainingBudget.remainingBudget > 0 && (
        <div className={styles.cardSection}>
          <div className={styles.cardHeader}>
            <div className={styles.cardTitleRow}>
              <span className={styles.cardIcon}>üéØ</span>
              <h2 className={styles.cardTitle}>Ph√¢n b·ªï ng√¢n s√°ch c√≤n l·∫°i t·ª´ th√°ng tr∆∞·ªõc v√†o m·ª•c ti√™u</h2>
            </div>
            <div className={styles.remainingBox}>
              <span className={styles.remainingLabel}>C√≤n l·∫°i:</span>
              <span className={styles.remainingValue}>{formatCurrency(remainingBudget.remainingBudget)}</span>
            </div>
          </div>
          <div className={styles.remainingDesc}>
            B·∫°n c√≥ th·ªÉ ph√¢n b·ªï s·ªë ti·ªÅn c√≤n l·∫°i t·ª´ th√°ng tr∆∞·ªõc v√†o c√°c m·ª•c ti√™u ti·∫øt ki·ªám c·ªßa m√¨nh. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông
            t√≠nh to√°n v√† ƒë·ªÅ xu·∫•t c√°ch ph√¢n b·ªï t·ªëi ∆∞u.
          </div>
          <RemainingBudgetAllocation
            remainingBudget={remainingBudget.remainingBudget}
            formatCurrency={formatCurrency}
            month={remainingBudget.month}
          />
        </div>
      )}

      {/* Collapsible Category Management Section */}
      <div className={styles.cardSection}>
        <button className={styles.collapseToggle} onClick={() => setShowCategoryManagement((prev) => !prev)}>
          {showCategoryManagement ? '·∫®n qu·∫£n l√Ω danh m·ª•c ‚ñ≤' : 'Qu·∫£n l√Ω danh m·ª•c ‚ñº'}
        </button>
        {showCategoryManagement && (
          <div className={styles.categoryManagement}>
            {/* T·∫°o m·ªõi danh m·ª•c */}
            <h3 className={styles.sectionTitle}>‚ûï T·∫°o m·ªõi danh m·ª•c</h3>
            <div className={styles.list}>
              {allocations.map((item, index) => renderAllocationCard(item, index, true))}
            </div>
            <div className={styles.buttonGroup}>
              <button className={styles.addButton} onClick={() => handleAdd()}>
                + Th√™m danh m·ª•c
              </button>
              <button className={styles.saveButton} onClick={handleSave}>
                üíæ L∆∞u ng√¢n s√°ch
              </button>
            </div>
            {isBudgetSaved && <p className={styles.saveConfirmation}>‚úÖ Ng√¢n s√°ch ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!</p>}

            {/* G·ª£i √Ω danh m·ª•c */}
            <div className={styles.subSection}>
              <h3 className={styles.subSectionTitle}>‚ú® G·ª£i √Ω danh m·ª•c</h3>
              <div className={styles.suggestionList}>
                {suggestedCategories.map((cat) => (
                  <button
                    key={cat}
                    className={styles.suggestionButton}
                    onClick={() => handleAdd(cat)}
                    title='Nh·∫•n ƒë·ªÉ th√™m nhanh'
                  >
                    {cat}
                  </button>
                ))}
              </div>
            </div>

            {/* Ph√¢n b·ªï danh m·ª•c theo th√°ng */}
            <h3 className={styles.sectionTitle}>üìä Ph√¢n b·ªï danh m·ª•c theo th√°ng</h3>
            <div className={styles.allocationList}>
              {budgetAllocations.map((item, index) => renderAllocationCard(item, index, false))}
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

export default SetupTab
